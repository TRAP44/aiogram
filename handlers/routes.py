from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from forms import ProductSearch, AdminAddProduct
from client import get_product_by_title, get_all_products, create_order, get_product_by_id, create_product, get_all_orders, get_order_by_id
from cloudipsp import Api, Checkout
import uuid
from dotenv import load_dotenv
import os

load_dotenv()

ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

router = Router()

ADMIN_IDS = [ADMIN_ID]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


# üì¶ /admin_add ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.message(F.text == "/admin_add")
async def admin_add_start(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await state.set_state(AdminAddProduct.title)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@router.message(AdminAddProduct.title)
async def admin_add_desc(msg: Message, state: FSMContext):
    await state.update_data(title=msg.text)
    await state.set_state(AdminAddProduct.desc)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@router.message(AdminAddProduct.desc)
async def admin_add_price(msg: Message, state: FSMContext):
    await state.update_data(desc=msg.text)
    await state.set_state(AdminAddProduct.price)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):")


@router.message(AdminAddProduct.price)
async def admin_add_image(msg: Message, state: FSMContext):
    try:
        price = float(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 49.99):")
        return
    await state.update_data(price=price)
    await state.set_state(AdminAddProduct.image_url)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@router.message(AdminAddProduct.image_url)
async def admin_add_finish(msg: Message, state: FSMContext):
    await state.update_data(image_url=msg.text)
    data = await state.get_data()

    success = await create_product({
        "title": data["title"],
        "desc": data["desc"],
        "price": data["price"],
        "image_url": data["image_url"]
    })

    if success:
        await msg.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

    await state.clear()


# üìú /admin_orders ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text == "/admin_orders")
async def list_all_orders(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    orders = await get_all_orders()
    if not orders:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    text = "<b>–í—Å–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for order in orders:
        text += f"üõí Order ID: {order['id']} | User ID: {order['user_id']} | Status: {order['status']} | Items: {len(order['items'])}\n"

    await msg.answer(text)

# üîç /admin_order <id> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ –ø–æ ID
@router.message(F.text.startswith("/admin_order "))
async def order_details(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        order_id = int(msg.text.split()[1])
    except:
        await msg.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /admin_order <id>")
        return

    order = await get_order_by_id(order_id)
    if not order:
        await msg.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return


    text = f"<b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
    text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={order['user_id']}'>–ù–∞–ø–∏—Å–∞—Ç—å</a> (ID: {order['user_id']})\n"
    text += f"üì¶ –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"

    for item in order["items"]:
        text += f"- {item['product']['title']} x {item['quantity']}\n"

    await msg.answer(text, parse_mode="HTML")


@router.message(F.text.in_({"/start", "–º–µ–Ω—é"}))
async def welcome_message(msg: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_title")],
            [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="show_catalog:0")]
        ]
    )
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=keyboard)


@router.callback_query(F.data == "search_by_title")
async def ask_for_title(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProductSearch.title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await callback.answer()


@router.message(ProductSearch.title)
async def process_title_search(msg: Message, state: FSMContext):
    title = msg.text.strip()
    products = await get_product_by_title(title)

    if not products:
        await msg.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        for product in products:
            text = (
                f"<b>{product['title']}</b>\n\n"
                f"{product['desc']}\n\n"
                f"<i>–¶–µ–Ω–∞:</i> <b>{product['price']} $</b>"
            )
            btns = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy:{product['id']}")]
            ])
            await msg.answer_photo(
                photo=product['image_url'],
                caption=text,
                parse_mode="HTML",
                reply_markup=btns
            )

    await state.clear()


@router.callback_query(F.data.startswith("show_catalog"))
async def show_catalog(callback: CallbackQuery):
    products = await get_all_products()
    if not products:
        await callback.message.answer("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        await callback.answer()
        return

    # –ò–Ω–¥–µ–∫—Å –∏–∑ callback_data: show_catalog:{index}
    index = int(callback.data.split(":")[1])
    product = products[index]

    text = (
        f"<b>{product['title']}</b>\n\n"
        f"{product['desc']}\n\n"
        f"<i>–¶–µ–Ω–∞:</i> <b>{product['price']} $</b>"
    )

    buttons = []
    if index > 0:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_catalog:{index-1}"))
    if index < len(products) - 1:
        buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"show_catalog:{index+1}"))

    pagination = InlineKeyboardMarkup(inline_keyboard=[
        buttons,
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy:{product['id']}")]
    ])

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=product['image_url'],
            caption=text,
            parse_mode="HTML"
        ),
        reply_markup=pagination
    )
    await callback.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(F.data.startswith("buy:"))
async def buy_handler(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–∑ FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    data = await state.get_data()
    cart = data.get("cart", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
    for item in cart:
        if item["product_id"] == product_id:
            item["quantity"] += 1
            break
    else:
        cart.append({"product_id": product_id, "quantity": 1})

    await state.update_data(cart=cart)

    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
@router.message(F.text == "/cart")
async def view_cart(msg: Message, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", [])

    if not cart:
        await msg.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    buttons = []
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for idx, item in enumerate(cart, start=1):
        title = await get_product_by_id(item['product_id'])
        buttons.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å ¬´{title['title']}¬ª", callback_data=f"remove_item:{item['product_id']}")])
        text += f"{idx}. –¢–æ–≤–∞—Ä ¬´{title['title']}¬ª ‚Äî –ö–æ–ª-–≤–æ: {item['quantity']}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ] + buttons)

    await msg.answer(text, reply_markup=keyboard)



# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, state: FSMContext):
    await state.update_data(cart=[])
    await callback.message.edit_text("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("remove_item:"))
async def remove_item(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    cart = data.get("cart", [])
    cart = [item for item in cart if item["product_id"] != product_id]
    await state.update_data(cart=cart)
    await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ù–∞–ø–∏—à–∏ <b>–∫–æ—Ä–∑–∏–Ω–∞</b>, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", [])

    if not cart:
        await callback.message.answer("‚ùó –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ FastAPI
    result = await create_order(callback.from_user.id, cart)

    if result:
        total_cents = 0
        all_products = await get_all_products()
        for item in cart:
            for p in all_products:
                if item['product_id'] == p['id']:
                    total_cents += int(p['price']) * 100 * item['quantity']


        api = Api(merchant_id=1396424, secret_key='test')
        checkout = Checkout(api=api)
        data = {
            "currency": "USD",
            "amount": total_cents,
            "order_id": f"order_{result}_{uuid.uuid4().hex[:6]}",
            "order_desc": "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram",
            "server_callback_url": "https://your-api.com/webhook/fondy"
        }
        url = checkout.url(data).get("checkout_url")

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", url=url)]
        ])

        await callback.message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

        import asyncio
        await asyncio.sleep(3)

        # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await callback.message.answer("üí¨ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.")
        await state.update_data(cart=[])  # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()