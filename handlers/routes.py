from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from forms import RegisterUser, UpdateUser, GetUser, DeleteUser
from client import (
    register_user, 
    get_all_users, 
    get_user_by_id, 
    delete_user_by_id,
    update_user_by_id
)

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

router = Router()


@router.message(F.text.in_({"/start", "/add"}))
async def start(msg: Message, state: FSMContext):
    await state.set_state(RegisterUser.name)
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")


@router.message(RegisterUser.name)
async def get_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await state.set_state(RegisterUser.email)
    await msg.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π email:")


@router.message(RegisterUser.email)
async def get_email(msg: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    email = msg.text

    success = await register_user(name=name, email=email)

    if success:
        await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=ReplyKeyboardRemove())
    else:
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    await state.clear()


markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¢ –ü–æ ID", callback_data="sort:id:asc"),
            InlineKeyboardButton(text="üî† –ü–æ –∏–º–µ–Ω–∏", callback_data="sort:name:asc"),
            InlineKeyboardButton(text="üìß –ü–æ email", callback_data="sort:email:asc"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÜÔ∏è –í–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ", callback_data="sort:current:asc"),
            InlineKeyboardButton(text="‚¨áÔ∏è –£–±—ã–≤–∞–Ω–∏–µ", callback_data="sort:current:desc"),
        ]
    ]
)

# –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
current_sort = {"order_by": "id", "direction": "asc"}

@router.message(F.text == "/users")
async def list_users(msg: Message):
    users = await get_all_users(order_by=current_sort["order_by"], direction=current_sort["direction"])

    if not users:
        await msg.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for user in users:
        text += f"üë§ <b>{user['name']}</b> ‚Äî {user['email']}\n"

    await msg.answer(text, reply_markup=markup)


@router.callback_query(F.data.startswith("sort:"))
async def handle_sort_callback(callback: CallbackQuery):
    parts = callback.data.split(":")
    field = parts[1]
    direction = parts[2]

    # –ï—Å–ª–∏ "current", —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–µ –º–µ–Ω—è—è –ø–æ–ª–µ
    if field == "current":
        current_sort["direction"] = direction
    else:
        current_sort["order_by"] = field
        current_sort["direction"] = direction

    users = await get_all_users(order_by=current_sort["order_by"], direction=current_sort["direction"])

    if not users:
        await callback.message.edit_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {current_sort['order_by']} {current_sort['direction']}):</b>\n\n"
    for user in users:
        text += f"üë§ <b>{user['name']}</b> ‚Äî {user['email']}\n"

    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()


@router.message(F.text == "/get")
async def get_user_start(msg: Message, state: FSMContext):
    await state.set_state(GetUser.id)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@router.message(GetUser.id)
async def get_user_by_id_handler(msg: Message, state: FSMContext):
    user = await get_user_by_id(int(msg.text))
    if user:
        await msg.answer(f"üÜî {user['id']}\nüë§ {user['name']}\nüìß {user['email']}")
    else:
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


@router.message(F.text == "/update")
async def update_start(msg: Message, state: FSMContext):
    await state.set_state(UpdateUser.id)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")


@router.message(UpdateUser.id)
async def update_name(msg: Message, state: FSMContext):
    await state.update_data(id=int(msg.text))
    await state.set_state(UpdateUser.name)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")


@router.message(UpdateUser.name)
async def update_email(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await state.set_state(UpdateUser.email)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")


@router.message(UpdateUser.email)
async def update_confirm(msg: Message, state: FSMContext):
    data = await state.get_data()
    success = await update_user_by_id(data["id"], data["name"], msg.text)
    if success:
        await msg.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


@router.message(F.text == "/delete")
async def delete_start(msg: Message, state: FSMContext):
    await state.set_state(DeleteUser.id)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")


@router.message(DeleteUser.id)
async def delete_confirm(msg: Message, state: FSMContext):
    success = await delete_user_by_id(int(msg.text))
    if success:
        await msg.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
    else:
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()